defmodule MTProto.AuthTest do
  use ExUnit.Case
  alias MTProto.Auth

  test "#req_pq" do
    # Sample packet getting from [1]
    # 1. https://core.telegram.org/mtproto/samples-auth_key#1-request-for-p-q-authorization
    {:ok, req_pq_bytes} = Base.decode16("789746603E0549828CCA27E966B301A48FECE2FC")
    {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")

    assert req_pq_bytes
        == Auth.req_pq(nonce_bytes)
  end

  test "#res_pq" do
    # Sample packet getting from [1] without auth_key_id, message_id, message_length
    # 1. https://core.telegram.org/mtproto/samples-auth_key#2-a-response-from-the-server-has-been-received-with-the-followin
    {:ok, res_pq_bytes} =
      Base.decode16(<<"632416053E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA5",
                      "739073300817ED48941A08F98100000015C4B51C01000000216BE86C022BB4C3">>)
    {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")

    assert %{nonce: nonce_bytes,
             server_nonce: <<165, 207, 77, 51, 244, 161, 30, 168, 119, 186, 74, 165, 115, 144, 115, 48>>,
             pq: 1724114033281923457,
             server_public_key_fingerprints: [14101943622620965665]}
        == Auth.res_pq(res_pq_bytes)
  end

  test "#pq_inner_data" do
    nonce = <<62, 5, 73, 130, 140, 202, 39, 233, 102, 179, 1, 164, 143, 236, 226, 252>>
    server_nonce = <<165, 207, 77, 51, 244, 161, 30, 168, 119, 186, 74, 165, 115, 144, 115, 48>>

    pq = 1724114033281923457
    p = 1229739323
    q = 1402015859

    {:ok, new_nonce} = Base.decode16("311C85DB234AA2640AFC4A76A735CF5B1F0FD68BD17FA181E1229AD867CC024D")

    assert <<236, 90, 201, 131, 8, 23, 237, 72, 148, 26, 8, 249, 129, 0, 0, 0, 4, 73,
             76, 85, 59, 0, 0, 0, 4, 83, 145, 16, 115, 0, 0, 0, 62, 5, 73, 130, 140,
             202, 39, 233, 102, 179, 1, 164, 143, 236, 226, 252, 165, 207, 77, 51, 244,
             161, 30, 168, 119, 186, 74, 165, 115, 144, 115, 48, 49, 28, 133, 219, 35,
             74, 162, 100, 10, 252, 74, 118, 167, 53, 207, 91, 31, 15, 214, 139, 209,
             127, 161, 129, 225, 34, 154, 216, 103, 204, 2, 77>>
        == Auth.p_q_inner_data(pq, p, q, nonce, server_nonce, new_nonce)
  end

  test "#p_q_inner_data_sha1" do
    # https://core.telegram.org/mtproto/samples-auth_key#4-encrypted-data-generation
    {:ok, sha1_bytes} = Base.decode16("DB761C27718A2305044F71F2AD951629D78B2449")
    packet =
      <<236, 90, 201, 131, 8, 23, 237, 72, 148, 26, 8, 249, 129, 0, 0, 0, 4, 73,
        76, 85, 59, 0, 0, 0, 4, 83, 145, 16, 115, 0, 0, 0, 62, 5, 73, 130, 140,
        202, 39, 233, 102, 179, 1, 164, 143, 236, 226, 252, 165, 207, 77, 51, 244,
        161, 30, 168, 119, 186, 74, 165, 115, 144, 115, 48, 49, 28, 133, 219, 35,
        74, 162, 100, 10, 252, 74, 118, 167, 53, 207, 91, 31, 15, 214, 139, 209,
        127, 161, 129, 225, 34, 154, 216, 103, 204, 2, 77>>

    assert sha1_bytes
        == Auth.p_q_inner_data_sha1(packet)
  end

  test "#p_q_inner_data_rsa" do
    # ...
  end

  test "#req_dh_params" do
    {:ok, req_dh_params_bytes} = Base.decode16(
      <<"BEE412D73E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA5739073",
        "3004494C553B0000000453911073000000216BE86C022BB4C3FE0001007BB0100A5231",
        "61904D9C69FA04BC60DECFC5DD74B99995C768EB60D8716E2109BAF2D4601DAB6B0961",
        "0DC11067BB89021E09471FCFA52DBD0F23204AD8CA8B012BF40A112F44695AB6C26695",
        "5386114EF5211E6372227ADBD34995D3E0E5FF02EC63A43F9926878962F7C570E6A6E7",
        "8BF8366AF917A5272675C46064BE62E3E202EFA8B1ADFB1C32A898C2987BE27B5F31D5",
        "7C9BB963ABCB734B16F652CEDB4293CBB7C878A3A3FFAC9DBEA9DF7C67BC9E9508E111",
        "C78FC46E057F5C65ADE381D91FEE430A6B576A99BDF8551FDB1BE2B57069B1A4573061",
        "8F27427E8A04720B4971EF4A9215983D68F2830C3EAA6E40385562F970D38A05C9F124",
        "6DC33438E6">>)
    {:ok, encrypted_data_bytes} = Base.decode16(
      <<"7BB0100A523161904D9C69FA04BC60DECFC5DD74B99995C768EB60D8716E2109BAF2D4601DAB6B09",
        "610DC11067BB89021E09471FCFA52DBD0F23204AD8CA8B012BF40A112F44695AB6C266955386114E",
        "F5211E6372227ADBD34995D3E0E5FF02EC63A43F9926878962F7C570E6A6E78BF8366AF917A52726",
        "75C46064BE62E3E202EFA8B1ADFB1C32A898C2987BE27B5F31D57C9BB963ABCB734B16F652CEDB42",
        "93CBB7C878A3A3FFAC9DBEA9DF7C67BC9E9508E111C78FC46E057F5C65ADE381D91FEE430A6B576A",
        "99BDF8551FDB1BE2B57069B1A45730618F27427E8A04720B4971EF4A9215983D68F2830C3EAA6E40",
        "385562F970D38A05C9F1246DC33438E6">>)

    nonce = <<62, 5, 73, 130, 140, 202, 39, 233, 102, 179, 1, 164, 143, 236, 226, 252>>
    server_nonce = <<165, 207, 77, 51, 244, 161, 30, 168, 119, 186, 74, 165, 115, 144, 115, 48>>
    p = 1229739323
    q = 1402015859
    public_key_fingerprint = 14101943622620965665

    assert req_dh_params_bytes
        == Auth.req_dh_params(nonce, server_nonce, p, q, public_key_fingerprint, encrypted_data_bytes)
  end

  test "#factorize" do
    # Sample PQ and P, Q numbers from [1]
    # 1. https://core.telegram.org/mtproto/samples-auth_key#3-pq-17ed48941a08f981-decomposed-into-2-prime-cofactors
    {:ok, pq_bytes} = Base.decode16("17ED48941A08F981")
    {:ok, p_bytes} = Base.decode16("494C553B")
    {:ok, q_bytes} = Base.decode16("53911073")

    <<pq :: 64>> = pq_bytes
    <<p :: 32>> = p_bytes
    <<q :: 32>> = q_bytes

    assert [p, q] == Auth.factorize(pq)
  end

  describe "#server_dh_params" do
    test "server_DH_params_fail" do
      {:ok, fail_bytes} = Base.decode16(
        <<"5D04CB793E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA573907330FE500200",
          "28A92FE20173B347A8BB324B">>)
      {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")
      {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
      {:ok, new_nonce_hash_bytes} = Base.decode16("FE50020028A92FE20173B347A8BB324B")

      assert %{status: :fail, nonce: nonce_bytes, server_nonce: server_nonce_bytes,
               new_nonce_hash: new_nonce_hash_bytes}
          == Auth.server_dh_params(fail_bytes)
    end

    test "server_DH_params_ok" do
      {:ok, ok_bytes} = Base.decode16(
        <<"5C07E8D03E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA573907330FE500200",
          "28A92FE20173B347A8BB324B5FAB2667C9A8BBCE6468D5B509A4CBDDC186240AC912CF7006AF8926",
          "DE606A2E74C0493CAA57741E6C82451F54D3E068F5CCC49B4444124B9666FFB405AAB564A3D01E67",
          "F6E912867C8D20D9882707DC330B17B4E0DD57CB53BFAAFA9EF5BE76AE6C1B9B6C51E2D6502A47C8",
          "83095C46C81E3BE25F62427B585488BB3BF239213BF48EB8FE34C9A026CC8413934043974DB03556",
          "633038392CECB51F94824E140B98637730A4BE79A8F9DAFA39BAE81E1095849EA4C83467C92A3A17",
          "D997817C8A7AC61C3FF414DA37B7D66E949C0AEC858F048224210FCC61F11C3A910B431CCBD104CC",
          "CC8DC6D29D4A5D133BE639A4C32BBFF153E63ACA3AC52F2E4709B8AE01844B142C1EE89D075D64F6",
          "9A399FEB04E656FE3675A6F8F412078F3D0B58DA15311C1A9F8E53B3CD6BB5572C294904B726D0BE",
          "337E2E21977DA26DD6E33270251C2CA29DFCC70227F0755F84CFDA9AC4B8DD5F84F1D1EB36BA45CD",
          "DC70444D8C213E4BD8F63B8AB95A2D0B4180DC91283DC063ACFB92D6A4E407CDE7C8C69689F77A00",
          "7441D4A6A8384B666502D9B77FC68B5B43CC607E60A146223E110FCB43BC3C942EF981930CDC4A1D",
          "310C0B64D5E55D308D863251AB90502C3E46CC599E886A927CDA963B9EB16CE62603B68529EE98F9",
          "F5206419E03FB458EC4BD9454AA8F6BA777573CC54B328895B1DF25EAD9FB4CD5198EE022B2B81F3",
          "88D281D5E5BC580107CA01A50665C32B552715F335FD76264FAD00DDD5AE45B94832AC79CE7C511D",
          "194BC42B70EFA850BB15C2012C5215CABFE97CE66B8D8734D0EE759A638AF013">>)
      {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")
      {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
      {:ok, encrypted_answer_bytes} = Base.decode16(
        <<"28A92FE20173B347A8BB324B5FAB2667C9A8BBCE6468D5B509A4CBDDC186240AC912CF7006AF8926",
          "DE606A2E74C0493CAA57741E6C82451F54D3E068F5CCC49B4444124B9666FFB405AAB564A3D01E67",
          "F6E912867C8D20D9882707DC330B17B4E0DD57CB53BFAAFA9EF5BE76AE6C1B9B6C51E2D6502A47C8",
          "83095C46C81E3BE25F62427B585488BB3BF239213BF48EB8FE34C9A026CC8413934043974DB03556",
          "633038392CECB51F94824E140B98637730A4BE79A8F9DAFA39BAE81E1095849EA4C83467C92A3A17",
          "D997817C8A7AC61C3FF414DA37B7D66E949C0AEC858F048224210FCC61F11C3A910B431CCBD104CC",
          "CC8DC6D29D4A5D133BE639A4C32BBFF153E63ACA3AC52F2E4709B8AE01844B142C1EE89D075D64F6",
          "9A399FEB04E656FE3675A6F8F412078F3D0B58DA15311C1A9F8E53B3CD6BB5572C294904B726D0BE",
          "337E2E21977DA26DD6E33270251C2CA29DFCC70227F0755F84CFDA9AC4B8DD5F84F1D1EB36BA45CD",
          "DC70444D8C213E4BD8F63B8AB95A2D0B4180DC91283DC063ACFB92D6A4E407CDE7C8C69689F77A00",
          "7441D4A6A8384B666502D9B77FC68B5B43CC607E60A146223E110FCB43BC3C942EF981930CDC4A1D",
          "310C0B64D5E55D308D863251AB90502C3E46CC599E886A927CDA963B9EB16CE62603B68529EE98F9",
          "F5206419E03FB458EC4BD9454AA8F6BA777573CC54B328895B1DF25EAD9FB4CD5198EE022B2B81F3",
          "88D281D5E5BC580107CA01A50665C32B552715F335FD76264FAD00DDD5AE45B94832AC79CE7C511D",
          "194BC42B70EFA850BB15C2012C5215CABFE97CE66B8D8734D0EE759A638AF013">>)


      assert %{status: :ok, nonce: nonce_bytes, server_nonce: server_nonce_bytes,
               encrypted_answer: encrypted_answer_bytes}
          == Auth.server_dh_params(ok_bytes)
    end
  end

  test "#server_dh_params_decode" do
    {:ok, new_nonce_bytes} = Base.decode16("311C85DB234AA2640AFC4A76A735CF5B1F0FD68BD17FA181E1229AD867CC024D")
    {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")
    {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
    {:ok, encrypted_answer_bytes} = Base.decode16(
      <<"28A92FE20173B347A8BB324B5FAB2667C9A8BBCE6468D5B509A4CBDDC186240AC912CF7006AF8926",
        "DE606A2E74C0493CAA57741E6C82451F54D3E068F5CCC49B4444124B9666FFB405AAB564A3D01E67",
        "F6E912867C8D20D9882707DC330B17B4E0DD57CB53BFAAFA9EF5BE76AE6C1B9B6C51E2D6502A47C8",
        "83095C46C81E3BE25F62427B585488BB3BF239213BF48EB8FE34C9A026CC8413934043974DB03556",
        "633038392CECB51F94824E140B98637730A4BE79A8F9DAFA39BAE81E1095849EA4C83467C92A3A17",
        "D997817C8A7AC61C3FF414DA37B7D66E949C0AEC858F048224210FCC61F11C3A910B431CCBD104CC",
        "CC8DC6D29D4A5D133BE639A4C32BBFF153E63ACA3AC52F2E4709B8AE01844B142C1EE89D075D64F6",
        "9A399FEB04E656FE3675A6F8F412078F3D0B58DA15311C1A9F8E53B3CD6BB5572C294904B726D0BE",
        "337E2E21977DA26DD6E33270251C2CA29DFCC70227F0755F84CFDA9AC4B8DD5F84F1D1EB36BA45CD",
        "DC70444D8C213E4BD8F63B8AB95A2D0B4180DC91283DC063ACFB92D6A4E407CDE7C8C69689F77A00",
        "7441D4A6A8384B666502D9B77FC68B5B43CC607E60A146223E110FCB43BC3C942EF981930CDC4A1D",
        "310C0B64D5E55D308D863251AB90502C3E46CC599E886A927CDA963B9EB16CE62603B68529EE98F9",
        "F5206419E03FB458EC4BD9454AA8F6BA777573CC54B328895B1DF25EAD9FB4CD5198EE022B2B81F3",
        "88D281D5E5BC580107CA01A50665C32B552715F335FD76264FAD00DDD5AE45B94832AC79CE7C511D",
        "194BC42B70EFA850BB15C2012C5215CABFE97CE66B8D8734D0EE759A638AF013">>)
    {:ok, answer_bytes} = Base.decode16(
      <<"BA0D89B53E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA57390733002000000",
        "FE000100C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A0A",
        "A7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458705AC68CD4FE",
        "6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5BCD1D4AC8CC49880708FA9B",
        "378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B56B0F6B410DBA74D8A84B2A14B3144E0E",
        "F1284754FD17ED950D5965B4B9DD46582DB1178D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15",
        "E83EBEA0F87FA9FF5EED70050DED2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D0",
        "4B2454BF6F4FADF034B10403119CD8E3B92FCC5BFE000100262AABA621CC4DF587DC94CF8252258C",
        "0B9337DFB47545A49CDD5C9B8EAE7236C6CADC40B24E88590F1CC2CC762EBF1CF11DCC0B393CAAD6",
        "CEE4EE5848001C73ACBB1D127E4CB93072AA3D1C8151B6FB6AA6124B7CD782EAF981BDCFCE9D7A00",
        "E423BD9D194E8AF78EF6501F415522E44522281C79D906DDB79C72E9C63D83FB2A940FF779DFB5F2",
        "FD786FB4AD71C9F08CF48758E534E9815F634F1E3A80A5E1C2AF210C5AB762755AD4B2126DFA61A7",
        "7FA9DA967D65DFD0AFB5CDF26C4D4E1A88B180F4E0D0B45BA1484F95CB2712B50BF3F5968D9D55C9",
        "9C0FB9FB67BFF56D7D4481B634514FBA3488C4CDA2FC0659990E8E868B28632875A9AA703BCDCE8F",
        "CB7AE551">>)
    {:ok, tmp_aes_key_bytes} = Base.decode16("F011280887C7BB01DF0FC4E17830E0B91FBB8BE4B2267CB985AE25F33B527253")
    {:ok, tmp_aes_iv_bytes} = Base.decode16("3212D579EE35452ED23E0D0C92841AA7D31B2E9BDEF2151E80D15860311C85DB")

    answer_padding = <<153,226,221,221,83,102,72,216>>
    answer = <<answer_bytes :: binary, answer_padding :: binary>>

    assert %{tmp_aes_key: tmp_aes_key_bytes, tmp_aes_iv: tmp_aes_iv_bytes, answer: answer}
        == Auth.server_dh_params_decode(new_nonce_bytes, server_nonce_bytes, encrypted_answer_bytes)
  end

  test "#server_dh_inner_data" do
    {:ok, answer_bytes} = Base.decode16(
      <<"BA0D89B53E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA57390733002000000",
        "FE000100C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A0A",
        "A7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458705AC68CD4FE",
        "6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5BCD1D4AC8CC49880708FA9B",
        "378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B56B0F6B410DBA74D8A84B2A14B3144E0E",
        "F1284754FD17ED950D5965B4B9DD46582DB1178D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15",
        "E83EBEA0F87FA9FF5EED70050DED2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D0",
        "4B2454BF6F4FADF034B10403119CD8E3B92FCC5BFE000100262AABA621CC4DF587DC94CF8252258C",
        "0B9337DFB47545A49CDD5C9B8EAE7236C6CADC40B24E88590F1CC2CC762EBF1CF11DCC0B393CAAD6",
        "CEE4EE5848001C73ACBB1D127E4CB93072AA3D1C8151B6FB6AA6124B7CD782EAF981BDCFCE9D7A00",
        "E423BD9D194E8AF78EF6501F415522E44522281C79D906DDB79C72E9C63D83FB2A940FF779DFB5F2",
        "FD786FB4AD71C9F08CF48758E534E9815F634F1E3A80A5E1C2AF210C5AB762755AD4B2126DFA61A7",
        "7FA9DA967D65DFD0AFB5CDF26C4D4E1A88B180F4E0D0B45BA1484F95CB2712B50BF3F5968D9D55C9",
        "9C0FB9FB67BFF56D7D4481B634514FBA3488C4CDA2FC0659990E8E868B28632875A9AA703BCDCE8F",
        "CB7AE551">>)

    answer_padding = <<153,226,221,221,83,102,72,216>>
    answer = <<answer_bytes :: binary, answer_padding :: binary>>

    {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")
    {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
    {:ok, dh_prime_bytes} = Base.decode16(
      <<"C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A",
        "0AA7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458",
        "705AC68CD4FE6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5B",
        "CD1D4AC8CC49880708FA9B378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B5",
        "6B0F6B410DBA74D8A84B2A14B3144E0EF1284754FD17ED950D5965B4B9DD46582DB117",
        "8D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15E83EBEA0F87FA9FF5EED70050DED",
        "2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D04B2454BF6F4FADF034",
        "B10403119CD8E3B92FCC5B">>)
    {:ok, g_a_bytes} = Base.decode16(
      <<"262AABA621CC4DF587DC94CF8252258C0B9337DFB47545A49CDD5C9B8EAE7236C6CADC",
        "40B24E88590F1CC2CC762EBF1CF11DCC0B393CAAD6CEE4EE5848001C73ACBB1D127E4C",
        "B93072AA3D1C8151B6FB6AA6124B7CD782EAF981BDCFCE9D7A00E423BD9D194E8AF78E",
        "F6501F415522E44522281C79D906DDB79C72E9C63D83FB2A940FF779DFB5F2FD786FB4",
        "AD71C9F08CF48758E534E9815F634F1E3A80A5E1C2AF210C5AB762755AD4B2126DFA61",
        "A77FA9DA967D65DFD0AFB5CDF26C4D4E1A88B180F4E0D0B45BA1484F95CB2712B50BF3",
        "F5968D9D55C99C0FB9FB67BFF56D7D4481B634514FBA3488C4CDA2FC0659990E8E868B",
        "28632875A9AA703BCDCE8F">>)

    assert %{nonce: nonce_bytes, server_nonce: server_nonce_bytes,
             g: 2, dh_prime: dh_prime_bytes, g_a: g_a_bytes,
             server_time: 1373993675, _padding: answer_padding}
        == Auth.server_dh_inner_data(answer)
  end

  test "#make_g_b" do
    g = 2
    {:ok, b_bytes} = Base.decode16(
      <<"6F620AFA575C9233EB4C014110A7BCAF49464F798A18A0981FEA1E05E8DA67D9681E0FD6DF0EDF02",
        "72AE3492451A84502F2EFC0DA18741A5FB80BD82296919A70FAA6D07CBBBCA2037EA7D3E327B61D5",
        "85ED3373EE0553A91CBD29B01FA9A89D479CA53D57BDE3A76FBD922A923A0A38B922C1D0701F53FF",
        "52D7EA9217080163A64901E766EB6A0F20BC391B64B9D1DD2CD13A7D0C946A3A7DF8CEC9E2236446",
        "F646C42CFE2B60A2A8D776E56C8D7519B08B88ED0970E10D12A8C9E355D765F2B7BBB7B4CA936008",
        "3435523CB0D57D2B106FD14F94B4EEE79D8AC131CA56AD389C84FE279716F8124A543337FB9EA3D9",
        "88EC5FA63D90A4BA3970E7A39E5C0DE5">>)
    {:ok, dh_prime_bytes} = Base.decode16(
      <<"C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A",
        "0AA7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458",
        "705AC68CD4FE6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5B",
        "CD1D4AC8CC49880708FA9B378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B5",
        "6B0F6B410DBA74D8A84B2A14B3144E0EF1284754FD17ED950D5965B4B9DD46582DB117",
        "8D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15E83EBEA0F87FA9FF5EED70050DED",
        "2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D04B2454BF6F4FADF034",
        "B10403119CD8E3B92FCC5B">>)
    {:ok, gb_bytes} = Base.decode16(
      <<"73700E7BFC7AEEC828EB8E0DCC04D09A0DD56A1B4B35F72F0B55FCE7DB7EBB72D7C33C",
        "5D4AA59E1C74D09B01AE536B318CFED436AFDB15FE9EB4C70D7F0CB14E46DBBDE9053A",
        "64304361EB358A9BB32E9D5C2843FE87248B89C3F066A7D5876D61657ACC52B0D81CD6",
        "83B2A0FA93E8ADAB20377877F3BC3369BBF57B10F5B589E65A9C27490F30A0C70FFCFD",
        "3453F5B379C1B9727A573CFFDCA8D23C721B135B92E529B1CDD2F7ABD4F34DAC4BE1EE",
        "AF60993DDE8ED45890E4F47C26F2C0B2E037BB502739C8824F2A99E2B1E7E416583417",
        "CC79A8807A4BDAC6A5E9805D4F6186C37D66F6988C9F9C752896F3D34D25529263FAF2",
        "670A09B2A59CE35264511F">>)

    assert gb_bytes == Auth.make_g_b(g, b_bytes, dh_prime_bytes)
  end

  test "#client_dh_inner_data" do
    retry_id = 0

    {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")
    {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
    {:ok, gb_bytes} = Base.decode16(
      <<"73700E7BFC7AEEC828EB8E0DCC04D09A0DD56A1B4B35F72F0B55FCE7DB7EBB72D7C33C",
        "5D4AA59E1C74D09B01AE536B318CFED436AFDB15FE9EB4C70D7F0CB14E46DBBDE9053A",
        "64304361EB358A9BB32E9D5C2843FE87248B89C3F066A7D5876D61657ACC52B0D81CD6",
        "83B2A0FA93E8ADAB20377877F3BC3369BBF57B10F5B589E65A9C27490F30A0C70FFCFD",
        "3453F5B379C1B9727A573CFFDCA8D23C721B135B92E529B1CDD2F7ABD4F34DAC4BE1EE",
        "AF60993DDE8ED45890E4F47C26F2C0B2E037BB502739C8824F2A99E2B1E7E416583417",
        "CC79A8807A4BDAC6A5E9805D4F6186C37D66F6988C9F9C752896F3D34D25529263FAF2",
        "670A09B2A59CE35264511F">>)

    assert <<84,182,67,102,62,5,73,130,140,202,39,233,102,179,1,164,143,236,226,252,165,
             207,77,51,244,161,30,168,119,186,74,165,115,144,115,48,0,0,0,0,0,0,0,0,254,0,
             1,0,115,112,14,123,252,122,238,200,40,235,142,13,204,4,208,154,13,213,106,27,
             75,53,247,47,11,85,252,231,219,126,187,114,215,195,60,93,74,165,158,28,116,
             208,155,1,174,83,107,49,140,254,212,54,175,219,21,254,158,180,199,13,127,12,
             177,78,70,219,189,233,5,58,100,48,67,97,235,53,138,155,179,46,157,92,40,67,
             254,135,36,139,137,195,240,102,167,213,135,109,97,101,122,204,82,176,216,28,
             214,131,178,160,250,147,232,173,171,32,55,120,119,243,188,51,105,187,245,123,
             16,245,181,137,230,90,156,39,73,15,48,160,199,15,252,253,52,83,245,179,121,
             193,185,114,122,87,60,255,220,168,210,60,114,27,19,91,146,229,41,177,205,210,
             247,171,212,243,77,172,75,225,238,175,96,153,61,222,142,212,88,144,228,244,
             124,38,242,192,178,224,55,187,80,39,57,200,130,79,42,153,226,177,231,228,22,
             88,52,23,204,121,168,128,122,75,218,198,165,233,128,93,79,97,134,195,125,102,
             246,152,140,159,156,117,40,150,243,211,77,37,82,146,99,250,242,103,10,9,178,
             165,156,227,82,100,81,31>>
        == Auth.client_dh_inner_data(nonce_bytes, server_nonce_bytes, retry_id, gb_bytes)
  end

  test "#client_dh_inner_data_encrypt" do
    {:ok, tmp_aes_key_bytes} = Base.decode16("F011280887C7BB01DF0FC4E17830E0B91FBB8BE4B2267CB985AE25F33B527253")
    {:ok, tmp_aes_iv_bytes} = Base.decode16("3212D579EE35452ED23E0D0C92841AA7D31B2E9BDEF2151E80D15860311C85DB")
    client_dh_inner_data =
      <<84,182,67,102,62,5,73,130,140,202,39,233,102,179,1,164,143,236,226,252,165,
        207,77,51,244,161,30,168,119,186,74,165,115,144,115,48,0,0,0,0,0,0,0,0,254,0,
        1,0,115,112,14,123,252,122,238,200,40,235,142,13,204,4,208,154,13,213,106,27,
        75,53,247,47,11,85,252,231,219,126,187,114,215,195,60,93,74,165,158,28,116,
        208,155,1,174,83,107,49,140,254,212,54,175,219,21,254,158,180,199,13,127,12,
        177,78,70,219,189,233,5,58,100,48,67,97,235,53,138,155,179,46,157,92,40,67,
        254,135,36,139,137,195,240,102,167,213,135,109,97,101,122,204,82,176,216,28,
        214,131,178,160,250,147,232,173,171,32,55,120,119,243,188,51,105,187,245,123,
        16,245,181,137,230,90,156,39,73,15,48,160,199,15,252,253,52,83,245,179,121,
        193,185,114,122,87,60,255,220,168,210,60,114,27,19,91,146,229,41,177,205,210,
        247,171,212,243,77,172,75,225,238,175,96,153,61,222,142,212,88,144,228,244,
        124,38,242,192,178,224,55,187,80,39,57,200,130,79,42,153,226,177,231,228,22,
        88,52,23,204,121,168,128,122,75,218,198,165,233,128,93,79,97,134,195,125,102,
        246,152,140,159,156,117,40,150,243,211,77,37,82,146,99,250,242,103,10,9,178,
        165,156,227,82,100,81,31>>
    {:ok, encrypted_bytes} = Base.decode16(
      <<"928A4957D0463B525C1CC48AABAA030A256BE5C746792C84CA4C5A0DF60AC799048D98",
        "A38A8480EDCF082214DFC79DCB9EE34E206513E2B3BC1504CFE6C9ADA46BF9A03CA74F",
        "192EAF8C278454ADABC795A566615462D31817382984039505F71CB33A41E2527A4B1A",
        "C05107872FED8E3ABCEE1518AE965B0ED3AED7F67479155BDA8E4C286B64CDF123EC74",
        "8CF289B1DB02D1907B562DF462D8582BA6F0A3022DC2D3504D69D1BA48B677E3A830BF",
        "AFD67584C8AA24E1344A8904E305F9587C92EF964F0083F50F61EAB4A393EAA33C9270",
        "294AEDC7732891D4EA1599F52311D74469D2112F4EDF3F342E93C8E87E812DC3989BAE",
        "CFE6740A46077524C75093F5A5405736DE8937BB6E42C9A0DCF22CA53227D462BCCC2C",
        "FE94B6FE86AB7FBFA395021F66661AF7C0024CA2986CA03F3476905407D1EA9C010B76",
        "3258DB1AA2CC7826D91334EFC1FDC665B67FE45ED0">>)

    encrypted_bytes_size = byte_size(encrypted_bytes) - 16
    <<encrypted :: binary-size(encrypted_bytes_size),
      encrypted_padding :: binary-size(16)>> = encrypted_bytes

    encrypted_result = Auth.client_dh_inner_data_encrypt(tmp_aes_key_bytes, tmp_aes_iv_bytes, client_dh_inner_data)

    assert <<encrypted :: binary-size(encrypted_bytes_size), _padding :: binary>>
         = encrypted_result
    assert 336 == byte_size(encrypted_result)
  end

  test "#set_client_dh_params" do
    {:ok, nonce_bytes} = Base.decode16("3E0549828CCA27E966B301A48FECE2FC")
    {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
    {:ok, encrypted_bytes} = Base.decode16(
      <<"928A4957D0463B525C1CC48AABAA030A256BE5C746792C84CA4C5A0DF60AC799048D98",
        "A38A8480EDCF082214DFC79DCB9EE34E206513E2B3BC1504CFE6C9ADA46BF9A03CA74F",
        "192EAF8C278454ADABC795A566615462D31817382984039505F71CB33A41E2527A4B1A",
        "C05107872FED8E3ABCEE1518AE965B0ED3AED7F67479155BDA8E4C286B64CDF123EC74",
        "8CF289B1DB02D1907B562DF462D8582BA6F0A3022DC2D3504D69D1BA48B677E3A830BF",
        "AFD67584C8AA24E1344A8904E305F9587C92EF964F0083F50F61EAB4A393EAA33C9270",
        "294AEDC7732891D4EA1599F52311D74469D2112F4EDF3F342E93C8E87E812DC3989BAE",
        "CFE6740A46077524C75093F5A5405736DE8937BB6E42C9A0DCF22CA53227D462BCCC2C",
        "FE94B6FE86AB7FBFA395021F66661AF7C0024CA2986CA03F3476905407D1EA9C010B76",
        "3258DB1AA2CC7826D91334EFC1FDC665B67FE45ED0">>)

    {:ok, set_client_dh_params_bytes} = Base.decode16(
      <<"1F5F04F53E0549828CCA27E966B301A48FECE2FCA5CF4D33F4A11EA877BA4AA5739073",
        "30FE500100928A4957D0463B525C1CC48AABAA030A256BE5C746792C84CA4C5A0DF60A",
        "C799048D98A38A8480EDCF082214DFC79DCB9EE34E206513E2B3BC1504CFE6C9ADA46B",
        "F9A03CA74F192EAF8C278454ADABC795A566615462D31817382984039505F71CB33A41",
        "E2527A4B1AC05107872FED8E3ABCEE1518AE965B0ED3AED7F67479155BDA8E4C286B64",
        "CDF123EC748CF289B1DB02D1907B562DF462D8582BA6F0A3022DC2D3504D69D1BA48B6",
        "77E3A830BFAFD67584C8AA24E1344A8904E305F9587C92EF964F0083F50F61EAB4A393",
        "EAA33C9270294AEDC7732891D4EA1599F52311D74469D2112F4EDF3F342E93C8E87E81",
        "2DC3989BAECFE6740A46077524C75093F5A5405736DE8937BB6E42C9A0DCF22CA53227",
        "D462BCCC2CFE94B6FE86AB7FBFA395021F66661AF7C0024CA2986CA03F3476905407D1",
        "EA9C010B763258DB1AA2CC7826D91334EFC1FDC665B67FE45ED0">>)

    assert set_client_dh_params_bytes
        == Auth.set_client_dh_params(nonce_bytes, server_nonce_bytes, encrypted_bytes)
  end

  test "#make_auth_key" do
    {:ok, b_bytes} = Base.decode16(
      <<"6F620AFA575C9233EB4C014110A7BCAF49464F798A18A0981FEA1E05E8DA67D9681E0FD6DF0EDF02",
        "72AE3492451A84502F2EFC0DA18741A5FB80BD82296919A70FAA6D07CBBBCA2037EA7D3E327B61D5",
        "85ED3373EE0553A91CBD29B01FA9A89D479CA53D57BDE3A76FBD922A923A0A38B922C1D0701F53FF",
        "52D7EA9217080163A64901E766EB6A0F20BC391B64B9D1DD2CD13A7D0C946A3A7DF8CEC9E2236446",
        "F646C42CFE2B60A2A8D776E56C8D7519B08B88ED0970E10D12A8C9E355D765F2B7BBB7B4CA936008",
        "3435523CB0D57D2B106FD14F94B4EEE79D8AC131CA56AD389C84FE279716F8124A543337FB9EA3D9",
        "88EC5FA63D90A4BA3970E7A39E5C0DE5">>)
    {:ok, dh_prime_bytes} = Base.decode16(
      <<"C71CAEB9C6B1C9048E6C522F70F13F73980D40238E3E21C14934D037563D930F48198A",
        "0AA7C14058229493D22530F4DBFA336F6E0AC925139543AED44CCE7C3720FD51F69458",
        "705AC68CD4FE6B6B13ABDC9746512969328454F18FAF8C595F642477FE96BB2A941D5B",
        "CD1D4AC8CC49880708FA9B378E3C4F3A9060BEE67CF9A4A4A695811051907E162753B5",
        "6B0F6B410DBA74D8A84B2A14B3144E0EF1284754FD17ED950D5965B4B9DD46582DB117",
        "8D169C6BC465B0D6FF9CA3928FEF5B9AE4E418FC15E83EBEA0F87FA9FF5EED70050DED",
        "2849F47BF959D956850CE929851F0D8115F635B105EE2E4E15D04B2454BF6F4FADF034",
        "B10403119CD8E3B92FCC5B">>)
    {:ok, g_a_bytes} = Base.decode16(
      <<"262AABA621CC4DF587DC94CF8252258C0B9337DFB47545A49CDD5C9B8EAE7236C6CADC",
        "40B24E88590F1CC2CC762EBF1CF11DCC0B393CAAD6CEE4EE5848001C73ACBB1D127E4C",
        "B93072AA3D1C8151B6FB6AA6124B7CD782EAF981BDCFCE9D7A00E423BD9D194E8AF78E",
        "F6501F415522E44522281C79D906DDB79C72E9C63D83FB2A940FF779DFB5F2FD786FB4",
        "AD71C9F08CF48758E534E9815F634F1E3A80A5E1C2AF210C5AB762755AD4B2126DFA61",
        "A77FA9DA967D65DFD0AFB5CDF26C4D4E1A88B180F4E0D0B45BA1484F95CB2712B50BF3",
        "F5968D9D55C99C0FB9FB67BFF56D7D4481B634514FBA3488C4CDA2FC0659990E8E868B",
        "28632875A9AA703BCDCE8F">>)

    {:ok, auth_key_bytes} = Base.decode16(
      <<"AB96E207C631300986F30EF97DF55E179E63C112675F0CE502EE76D74BBEE6CBD1E957",
        "72818881E9F2FF54BD52C258787474F6A7BEA61EABE49D1D01D55F64FC07BC31685716",
        "EC8FB46FEACF9502E42CFD6B9F45A08E90AA5C2B5933AC767CBE1CD50D8E64F89727CA",
        "4A1A5D32C0DB80A9FCDBDDD4F8D5A1E774198F1A4299F927C484FEEC395F29647E43C3",
        "243986F93609E23538C21871DF50E00070B3B6A8FA9BC15628E8B43FF977409A61CEEC",
        "5A21CF7DFB5A4CC28F5257BC30CD8F2FB92FBF21E28924065F50E0BBD5E11A420300E2",
        "C136B80E9826C6C5609B5371B7850AA628323B6422F3A94F6DFDE4C3DC1EA60F7E11EE",
        "63122B3F39CBD1A8430157">>)

    assert auth_key_bytes
        == Auth.make_auth_key(g_a_bytes, b_bytes, dh_prime_bytes)
  end

  test "#auth_key_hash" do
    {:ok, auth_key_bytes} = Base.decode16(
      <<"AB96E207C631300986F30EF97DF55E179E63C112675F0CE502EE76D74BBEE6CBD1E957",
        "72818881E9F2FF54BD52C258787474F6A7BEA61EABE49D1D01D55F64FC07BC31685716",
        "EC8FB46FEACF9502E42CFD6B9F45A08E90AA5C2B5933AC767CBE1CD50D8E64F89727CA",
        "4A1A5D32C0DB80A9FCDBDDD4F8D5A1E774198F1A4299F927C484FEEC395F29647E43C3",
        "243986F93609E23538C21871DF50E00070B3B6A8FA9BC15628E8B43FF977409A61CEEC",
        "5A21CF7DFB5A4CC28F5257BC30CD8F2FB92FBF21E28924065F50E0BBD5E11A420300E2",
        "C136B80E9826C6C5609B5371B7850AA628323B6422F3A94F6DFDE4C3DC1EA60F7E11EE",
        "63122B3F39CBD1A8430157">>)

    assert <<145, 9, 76, 225, 110, 226, 238, 115>>
        == Auth.auth_key_hash(auth_key_bytes)
  end

  test "#make_nonce_hash1" do
    {:ok, auth_key_bytes} = Base.decode16(
      <<"AB96E207C631300986F30EF97DF55E179E63C112675F0CE502EE76D74BBEE6CBD1E957",
        "72818881E9F2FF54BD52C258787474F6A7BEA61EABE49D1D01D55F64FC07BC31685716",
        "EC8FB46FEACF9502E42CFD6B9F45A08E90AA5C2B5933AC767CBE1CD50D8E64F89727CA",
        "4A1A5D32C0DB80A9FCDBDDD4F8D5A1E774198F1A4299F927C484FEEC395F29647E43C3",
        "243986F93609E23538C21871DF50E00070B3B6A8FA9BC15628E8B43FF977409A61CEEC",
        "5A21CF7DFB5A4CC28F5257BC30CD8F2FB92FBF21E28924065F50E0BBD5E11A420300E2",
        "C136B80E9826C6C5609B5371B7850AA628323B6422F3A94F6DFDE4C3DC1EA60F7E11EE",
        "63122B3F39CBD1A8430157">>)
    {:ok, new_nonce_bytes} = Base.decode16(
      <<"311C85DB234AA2640AFC4A76A735CF5B1F0FD68BD17FA181E1229AD867CC024D">>)

    assert <<204, 235, 192, 33, 114, 102, 225, 237, 236, 127, 176, 160, 238, 214, 194, 32>>
        == Auth.make_nonce_hash1(new_nonce_bytes, auth_key_bytes)
  end

  test "#make_server_salt" do
    {:ok, server_nonce_bytes} = Base.decode16("A5CF4D33F4A11EA877BA4AA573907330")
    {:ok, new_nonce_bytes} = Base.decode16(
      <<"311C85DB234AA2640AFC4A76A735CF5B1F0FD68BD17FA181E1229AD867CC024D">>)

    assert <<148, 211, 200, 232, 215, 235, 188, 204>>
        == Auth.make_server_salt(new_nonce_bytes, server_nonce_bytes)
  end

  describe "#dh_gen" do
    test "dh_gen_ok" do
      nonce = <<124, 226, 47, 241, 31, 201, 126, 253, 2, 206, 61, 54, 131, 242, 239, 180>>
      server_nonce = <<46, 77, 121, 151, 203, 186, 106, 209, 11, 85, 150, 163, 187, 230, 133, 51>>
      new_nonce_hash1 = <<153, 157, 246, 70, 95, 136, 195, 150, 192, 226, 210, 201, 81, 170, 168, 170>>
      packet =
        <<52,247,203,59,124,226,47,241,31,201,126,253,2,206,61,54,131,242,239,180,46,
          77,121,151,203,186,106,209,11,85,150,163,187,230,133,51,153,157,246,70,95,
          136,195,150,192,226,210,201,81,170,168,170>>

      assert %{status: :ok, nonce: nonce, server_nonce: server_nonce,
               new_nonce_hash1: new_nonce_hash1}
          == Auth.dh_gen(packet)
    end

    test "dh_gen_retry" do
      nonce = <<124, 226, 47, 241, 31, 201, 126, 253, 2, 206, 61, 54, 131, 242, 239, 180>>
      server_nonce = <<46, 77, 121, 151, 203, 186, 106, 209, 11, 85, 150, 163, 187, 230, 133, 51>>
      new_nonce_hash2 = <<153, 157, 246, 70, 95, 136, 195, 150, 192, 226, 210, 201, 81, 170, 168, 170>>
      packet =
        <<185,31,220,70,124,226,47,241,31,201,126,253,2,206,61,54,131,242,239,180,46,
          77,121,151,203,186,106,209,11,85,150,163,187,230,133,51,153,157,246,70,95,
          136,195,150,192,226,210,201,81,170,168,170>>

      assert %{status: :retry, nonce: nonce, server_nonce: server_nonce,
               new_nonce_hash2: new_nonce_hash2}
          == Auth.dh_gen(packet)
    end

    test "dh_gen_fail" do
      nonce = <<124, 226, 47, 241, 31, 201, 126, 253, 2, 206, 61, 54, 131, 242, 239, 180>>
      server_nonce = <<46, 77, 121, 151, 203, 186, 106, 209, 11, 85, 150, 163, 187, 230, 133, 51>>
      new_nonce_hash3 = <<153, 157, 246, 70, 95, 136, 195, 150, 192, 226, 210, 201, 81, 170, 168, 170>>
      packet =
        <<2,174,157,166,124,226,47,241,31,201,126,253,2,206,61,54,131,242,239,180,46,
          77,121,151,203,186,106,209,11,85,150,163,187,230,133,51,153,157,246,70,95,
          136,195,150,192,226,210,201,81,170,168,170>>

      assert %{status: :fail, nonce: nonce, server_nonce: server_nonce,
               new_nonce_hash3: new_nonce_hash3}
          == Auth.dh_gen(packet)
    end
  end
end
